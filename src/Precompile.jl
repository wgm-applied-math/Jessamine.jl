precompile(Tuple{Type{Jessamine.GenomeSpec}, Vararg{Int64, 5}})
precompile(Tuple{typeof(Base.getindex), Type{Jessamine.AbstractMultiOp}, Jessamine.Add, Jessamine.Multiply})
precompile(Tuple{Type{NamedTuple{(:p_mutate_op, :p_mutate_index, :p_duplicate_index, :p_delete_index, :p_duplicate_instruction, :p_delete_instruction, :op_inventory), T} where T<:Tuple}, Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Array{Jessamine.AbstractMultiOp, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:p_mutate_op, :p_mutate_index, :p_duplicate_index, :p_delete_index, :p_duplicate_instruction, :p_delete_instruction, :op_inventory), Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Array{Jessamine.AbstractMultiOp, 1}}}, Type{Jessamine.MutationSpec}})
precompile(Tuple{typeof(Jessamine.workspace_size), Jessamine.GenomeSpec})
precompile(Tuple{Type{Jessamine.MutationDist}, Jessamine.MutationSpec, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:num_to_keep, :num_to_generate, :p_take_better), Tuple{Int64, Int64, Float64}}, Type{Jessamine.SelectionSpec}})
precompile(Tuple{Type{Jessamine.SelectionDist}, Jessamine.SelectionSpec})
precompile(Tuple{Type{Jessamine.EvolutionSpec}, Jessamine.GenomeSpec, Jessamine.MutationSpec, Jessamine.SelectionSpec, Function, Int64})
precompile(Tuple{typeof(Jessamine.random_initial_population), Random.TaskLocalRNG, Jessamine.EvolutionSpec, Distributions.DiscreteNonParametric{Int64, Float64, Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:sense,), Tuple{SciMLBase.ObjSense}}, typeof(Jessamine.random_initial_population), Random.TaskLocalRNG, Jessamine.GenomeSpec, Jessamine.MutationDist, Distributions.DiscreteNonParametric{Int64, Float64, Array{Int64, 1}, Array{Float64, 1}}, Jessamine.SelectionSpec, Function})
precompile(Tuple{typeof(Base.getindex), Array{Jessamine.AbstractGeneOp, 1}, Int64})
precompile(Tuple{Type{Jessamine.Instruction}, Jessamine.Add, Array{Int64, 1}})
precompile(Tuple{Type{Jessamine.Instruction}, Jessamine.Multiply, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Array{Jessamine.Instruction, 1}, 1}, Array{Jessamine.Instruction, 1}, Int64})
precompile(Tuple{typeof(Jessamine.op_eval_add_into!), Array{Float64, 1}, Jessamine.Multiply, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.setproperty!), Jessamine._LSRGR_Context{Array{Array{Float64, 1}, 1}, Array{Float64, 1}}, Symbol, Float64})
precompile(Tuple{typeof(Base.setproperty!), Jessamine._LSRGR_Context{Array{Array{Float64, 1}, 1}, Array{Float64, 1}}, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Jessamine.num_operands), Tuple{Array{Array{Jessamine.Instruction, 1}, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Jessamine.num_operands), Tuple{Array{Array{Jessamine.Instruction, 1}, 1}}}})
precompile(Tuple{Type{Jessamine.Agent{R, G, VPar, T} where T where VPar<:(AbstractArray{T, 1} where T) where G<:Jessamine.AbstractGenome where R}, Float64, Jessamine.Genome, Array{Float64, 1}, Jessamine.BasicLinearModelResult})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ForwardOrdering, Jessamine.Agent{Float64, Jessamine.Genome, Array{Float64, 1}, Jessamine.BasicLinearModelResult}, Jessamine.Agent{Float64, Jessamine.Genome, Array{Float64, 1}, Jessamine.BasicLinearModelResult}})
precompile(Tuple{typeof(Base.setindex!), Array{Jessamine.Agent{R, G, VPar, T} where T where VPar<:(AbstractArray{T, 1} where T) where G<:Jessamine.AbstractGenome where R, 1}, Jessamine.Agent{Float64, Jessamine.Genome, Array{Float64, 1}, Jessamine.BasicLinearModelResult}, Int64})
precompile(Tuple{typeof(Jessamine.evolution_loop), Random.TaskLocalRNG, Jessamine.EvolutionSpec, Jessamine.Population})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:max_generations, :stop_on_innovation), Tuple{Int64, Bool}}, typeof(Jessamine.evolution_loop), Random.TaskLocalRNG, Jessamine.GenomeSpec, Jessamine.MutationDist, Jessamine.SelectionDist, Function, Jessamine.Population})
precompile(Tuple{typeof(Jessamine.is_better), Float64, Float64, SciMLBase.ObjSense})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.identity), typeof(Base.max)}, Type{Jessamine.Agent{R, G, VPar, T} where T where VPar<:(AbstractArray{T, 1} where T) where G<:Jessamine.AbstractGenome where R}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.identity), typeof(Base.min)}, Type{Jessamine.Agent{R, G, VPar, T} where T where VPar<:(AbstractArray{T, 1} where T) where G<:Jessamine.AbstractGenome where R}})
precompile(Tuple{typeof(Base.min), Jessamine.Agent{Float64, Jessamine.Genome, Array{Float64, 1}, Jessamine.BasicLinearModelResult}, Jessamine.Agent{Float64, Jessamine.Genome, Array{Float64, 1}, Jessamine.BasicLinearModelResult}})
precompile(Tuple{typeof(Base.iterate), Array{Jessamine.Instruction, 1}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Jessamine.Instruction, 1}, Jessamine.Instruction})
precompile(Tuple{typeof(Jessamine.mutate), Random.TaskLocalRNG, Jessamine.MutationDist, Jessamine.Instruction})
precompile(Tuple{typeof(Jessamine.mutate), Random.TaskLocalRNG, Jessamine.MutationDist, Jessamine.Add})
precompile(Tuple{typeof(Jessamine.rdd_state), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Jessamine.mutate), Random.TaskLocalRNG, Jessamine.MutationDist, Jessamine.Multiply})
precompile(Tuple{typeof(Base.eachindex), Array{Array{Jessamine.Instruction, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{Jessamine.Instruction, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.eachindex), Array{Jessamine.Instruction, 1}})
precompile(Tuple{typeof(Base.max), Jessamine.Agent{Float64, Jessamine.Genome, Array{Float64, 1}, Jessamine.BasicLinearModelResult}, Jessamine.Agent{Float64, Jessamine.Genome, Array{Float64, 1}, Jessamine.BasicLinearModelResult}})
precompile(Tuple{Type{Jessamine.Genome}, Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Array{Jessamine.Instruction, 1}, 1}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Jessamine.rdd_state), Tuple{Jessamine.Instruction, Int64}})
precompile(Tuple{typeof(Jessamine.short_show), Base.IOStream, Jessamine.Agent{Float64, Jessamine.Genome, Array{Float64, 1}, Jessamine.BasicLinearModelResult}})
precompile(Tuple{typeof(Jessamine.short_show), Base.IOStream, Jessamine.Add})
precompile(Tuple{typeof(Jessamine.short_show), Base.IOStream, Jessamine.Multiply})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Jessamine.BasicLinearModelResult})
precompile(Tuple{typeof(Jessamine.op_eval), Jessamine.Add, Array{SymPyCore.Sym{PyCall.PyObject}, 1}})
precompile(Tuple{typeof(Jessamine.op_eval), Jessamine.Multiply, Array{SymPyCore.Sym{PyCall.PyObject}, 1}})
precompile(Tuple{typeof(Jessamine.flat_workspace), Jessamine.CellState{SymPyCore.Sym{PyCall.PyObject}}})
precompile(Tuple{typeof(Jessamine.run_genome_sympy), Jessamine.GenomeSpec, Jessamine.Genome})
precompile(Tuple{typeof(Jessamine.model_sympy_output), Jessamine.GenomeSpec, Jessamine.Agent{Float64, Jessamine.Genome, Array{Float64, 1}, Jessamine.BasicLinearModelResult}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:tolerance,), Tuple{Float64}}, typeof(Jessamine.replace_near_integer), SymPyCore.Sym{PyCall.PyObject}})
precompile(extend_if_singleton, (Vector{Float64}, Int64))
precompile(run_genome, (GenomeSpec, Genome, Vector{Float64}, Vector{Vector{Float64}}))
precompile(least_squares_ridge, (Vector{Vector{Float64}}, Vector{Float64}, Float64, GenomeSpec, Genome, Vector{Float64}))
precompile(least_squares_ridge_grow_and_rate, (Vector{Vector{Float64}}, Vector{Float64}, Float64, Float64, Float64, GenomeSpec, Genome))
precompile(run_genome, (GenomeSpec, Genome, Vector{SymPyCore.Sym{PyCall.PyObject}}, Vector{SymPyCore.Sym{PyCall.PyObject}}))
